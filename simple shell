/* prompt func updated!

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/wait.h>

char **prompt(void);
void exec(char**);
int main() {
    int i;
        char **prom;
        printf("$ ");
        prom =prompt();
        exec(prom);
        
        while (prom[i])
        {
            free(prom[i++]);
        }
	free(prom);
        return (0);
}

char **prompt(void)
{
        size_t gline, n;
        int i = 0, j = 0, k = 0;
        char *token,*token_l, *linp = NULL, *lin;
        char **commands;
 
        
	
	gline = getline(&linp, &n, stdin);
	if (gline == -1)
	{
	    if(feof(stdin))
	        exit (EXIT_SUCCESS);
	    else 
	    {
	        perror("can not getline  (l:32)");
		exit (EXIT_FAILURE);
	    }
	}
 
        lin = strdup(linp);
        if (lin == NULL)
	{
		perror("can not duplicate the input (l:44)");
		exit (EXIT_FAILURE);
	}
        token_l = strtok(lin, " ");
        if (token_l == NULL)
	{
		perror("can not tokenize (l:50)");
		exit (EXIT_FAILURE);
	}
        while (token_l)
        {
            k++;
            token_l = strtok(NULL, " ");
        }
        
        token = strtok(linp, " ");
        if (token == NULL)
	{
		perror("can not tokenize (l:63)");
		exit (EXIT_FAILURE);
	}
        commands = malloc(sizeof(char *) * (k+1));
        if (commands == NULL)
        {
		perror("can not allocate mem (l:69)");
		exit (EXIT_FAILURE);
        }
        
        while (token)
        {
                commands[i] = malloc(sizeof(char) * strlen(token));
                if (strcpy(commands[i], token) == NULL)
                {
                    perror("copy tokens (l:79)");
		            exit (EXIT_FAILURE);  
                }
                token = strtok(NULL, " ");
                i++;
        }
 
        commands[i] = NULL;
 
 
        free(linp);
        free(lin);
        
	return(commands);
}

void exec(char **argv)
{
  int status;
  pid_t process = fork();
  
  if (process == 0)
  {
      if (execve(argv[0], argv, NULL) == -1)
      {
      	perror(" execve fun failed ");
	exit (EXIT_FAILURE);
      }
  }
  else if (process == -1)
  {
      perror(" fork fun failed ");
      exit (EXIT_FAILURE);
  }
  else
  {
      wait(&status);
  }
  
 }
-------------------------------
#ifndef SHELL_H
#define SHELL_H
 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
 
char **prompt(void);
 
#endif
